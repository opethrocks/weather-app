{"remainingRequest":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/matt/projects/vue-weather-app/src/components/CurrentConditions.vue?vue&type=style&index=0&id=760e2c91&scoped=true&lang=css&","dependencies":[{"path":"/Users/matt/projects/vue-weather-app/src/components/CurrentConditions.vue","mtime":1600376071742},{"path":"/Users/matt/projects/vue-weather-app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5mbGV4LWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQouYm94IHsKICB3aWR0aDogNjAwcHg7Cn0KLmNhcGl0YWxpemUgewogIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplOwp9CiNyb3VuZC1jb3JuZXJzIHsKICBib3JkZXItcmFkaXVzOiAxMDBweDsKfQojaWNvbiB7CiAgZm9udC1zaXplOiAyNTZweDsKfQojaWNvbi1jb2xvciB7CiAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["CurrentConditions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CurrentConditions.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"flex-container\">\n      <div class=\"box\" id=\"round-corners\">\n        <p class=\"label is-size-3 pt-3\">\n          <font-awesome-icon icon=\"location-arrow\" />\n          {{ currentWeather.name }}, {{ currentWeather.sys.country }}\n        </p>\n\n        <p class=\"is-size-4 has-text-weight-semibold capitalize\">\n          {{ getWeather[0].description }}\n        </p>\n        <p class=\"is-size-4 has-text-weight-semibold\">\n          <font-awesome-icon icon=\"thermometer-half\" />\n          {{ Math.round(currentWeather.main.temp) }}{{ formatUnits }}\n        </p>\n        <div id=\"icon\">\n          <i\n            :style=\"{ color: randomColor() }\"\n            :class=\"`wi wi-owm-${getWeather[0].icon}`\"\n          ></i>\n        </div>\n        <p class=\"has-text-weight-semibold\">\n          <font-awesome-icon icon=\"wind\" />\n          Wind: {{ Math.round(currentWeather.wind.speed) }} Mph\n        </p>\n        <p class=\"has-text-weight-semibold\">\n          <font-awesome-icon icon=\"water\" /> Humidity:\n          {{ currentWeather.main.humidity }}%\n        </p>\n        <p class=\"has-text-weight-semibold\">\n          <font-awesome-icon icon=\"sun\" />\n          <font-awesome-icon icon=\"long-arrow-alt-up\" />\n          Sunrise:\n          {{\n            new Date(currentWeather.sys.sunrise * 1000).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }}\n        </p>\n        <p class=\"pb-2 has-text-weight-semibold\">\n          <font-awesome-icon icon=\"sun\" />\n          <font-awesome-icon icon=\"long-arrow-alt-down\" />\n          Sunset:\n          {{\n            new Date(currentWeather.sys.sunset * 1000).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }}\n        </p>\n        <button\n          class=\"button is-rounded is-link is-small\"\n          @click=\"toggleForecast\"\n        >\n          Show Forecast\n        </button>\n      </div>\n      <forecast\n        :isActive=\"isActive\"\n        :forecastWeather=\"forecastWeather\"\n        :unitSelected=\"unitSelected\"\n        :forecastIcon=\"forecastIcon\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Forecast from './Forecast.vue';\n\nexport default {\n  name: 'CurrentConditions',\n  components: {\n    Forecast\n  },\n  props: {\n    isActive: {\n      type: Boolean,\n      default: () => {\n        false;\n      }\n    },\n    forecastWeather: {\n      type: Object,\n      default: () => {}\n    },\n    currentWeather: {\n      type: Object,\n      default: () => {}\n    },\n    unitSelected: {\n      type: String,\n      default: () => ''\n    },\n    weatherIcon: {\n      type: Array,\n      default: () => {\n        [];\n      }\n    },\n    forecastIcon: {\n      type: Array,\n      default: () => {\n        [];\n      }\n    }\n  },\n  data() {\n    return {\n      visible: true,\n      icon: null\n    };\n  },\n  methods: {\n    toggleForecast() {\n      this.$store.dispatch('toggleForecast');\n    },\n    randomColor() {\n      return '#' + (((1 << 24) * Math.random()) | 0).toString(16);\n    }\n  },\n  computed: {\n    formatUnits() {\n      if (this.unitSelected === 'imperial') {\n        return '°F';\n      } else {\n        return '°C';\n      }\n    },\n    getWeather() {\n      return this.currentWeather.weather.map((item) => item);\n    },\n    getForecast() {\n      return this.forecastWeather.list;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flex-container {\n  display: flex;\n  justify-content: center;\n}\n.box {\n  width: 600px;\n}\n.capitalize {\n  text-transform: capitalize;\n}\n#round-corners {\n  border-radius: 100px;\n}\n#icon {\n  font-size: 256px;\n}\n#icon-color {\n  color: red;\n}\n</style>\n"]}]}