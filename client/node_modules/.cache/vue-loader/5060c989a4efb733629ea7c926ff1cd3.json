{"remainingRequest":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/matt/projects/vue-weather-app/src/components/Forecast.vue?vue&type=style&index=0&id=118e74ab&scoped=true&lang=css&","dependencies":[{"path":"/Users/matt/projects/vue-weather-app/src/components/Forecast.vue","mtime":1600370158870},{"path":"/Users/matt/projects/vue-weather-app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matt/projects/vue-weather-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZsZXgtY29udGFpbmVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZmxvdzogcm93IHdyYXA7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7CiAgZ3JpZC1yb3ctZ2FwOiAyZW07Cn0KLmZsZXgtaXRlbSB7CiAgbWFyZ2luOiAwLjc1ZW07Cn0KLmJveCB7CiAgYm9yZGVyLXJhZGl1czogMTAwcHg7CiAgd2lkdGg6IDgwMHB4Owp9Ci5idXR0b24gewogIG1hcmdpbjogMWVtOwp9CiNkZXNjcmlwdGlvbiB7CiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7Cn0KI2ljb24gewogIGZvbnQtc2l6ZTogNzVweDsKfQojaWNvbi1jb2xvciB7CiAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["Forecast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Forecast.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"box\" v-if=\"isActive\">\n      <p class=\"label is-size-3 pt-3\">\n        <font-awesome-icon icon=\"location-arrow\" />\n        {{ forecastWeather.city.name }}, {{ forecastWeather.city.country }}\n      </p>\n      <h1 class=\"label is-size-4\">12 hour forecast</h1>\n      <div class=\"flex-container\">\n        <div v-for=\"forecast in getForecast\" :key=\"forecast.dt\">\n          <div\n            class=\"flex-item\"\n            v-for=\"weather in forecast.weather\"\n            :key=\"weather.id\"\n          >\n            <p class=\"has-text-weight-semibold\">\n              {{\n                new Date(forecast.dt_txt).toLocaleDateString([], {\n                  month: '2-digit',\n                  day: '2-digit',\n                  year: '2-digit'\n                })\n              }}\n            </p>\n            <p class=\"has-text-weight-semibold\">\n              {{\n                new Date(forecast.dt_txt).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit'\n                })\n              }}\n            </p>\n            <div id=\"icon\">\n              <i\n                :style=\"{ color: randomColor() }\"\n                :class=\"`wi wi-owm-${weather.icon}`\"\n              ></i>\n            </div>\n\n            <p class=\"has-text-weight-semibold\" id=\"description\">\n              <font-awesome-icon icon=\"thermometer-half\" />\n              {{ Math.round(forecast.main.temp_max) }}{{ formatUnits }}\n            </p>\n            <p class=\"has-text-weight-semibold\" id=\"description\">\n              {{ weather.description }}\n            </p>\n          </div>\n        </div>\n      </div>\n      <button\n        class=\"button is-rounded is-link is-small\"\n        @click=\"toggleConditions\"\n      >\n        Show Conditions\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Forecast',\n  data() {\n    return {\n      units: null\n    };\n  },\n  props: {\n    isActive: {\n      type: Boolean,\n      default: () => {\n        false;\n      }\n    },\n    forecastWeather: {\n      type: Array,\n      default: () => {\n        [];\n      }\n    },\n    unitSelected: {\n      type: Array,\n      default: () => {\n        [];\n      }\n    },\n    forecastIcon: {\n      type: Array,\n      default: () => {\n        [];\n      }\n    }\n  },\n  methods: {\n    toggleConditions() {\n      this.$store.dispatch('toggleForecast');\n    },\n    randomColor() {\n      return '#' + (((1 << 24) * Math.random()) | 0).toString(16);\n    }\n  },\n  computed: {\n    getForecast() {\n      return this.forecastWeather.list.filter((item, index) => index < 10);\n    },\n    getIcon() {\n      return this.forecastIcon.filter((item, index) => index < 10);\n    },\n    formatUnits() {\n      if (this.unitSelected === 'imperial') {\n        return '°F';\n      } else {\n        return '°C';\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flex-container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-around;\n  grid-row-gap: 2em;\n}\n.flex-item {\n  margin: 0.75em;\n}\n.box {\n  border-radius: 100px;\n  width: 800px;\n}\n.button {\n  margin: 1em;\n}\n#description {\n  text-transform: capitalize;\n}\n#icon {\n  font-size: 75px;\n}\n#icon-color {\n  color: red;\n}\n</style>\n"]}]}